/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0042AssocSharesObjWrapTres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042AssocSharesObjWrapTres{}

// V0042AssocSharesObjWrapTres struct for V0042AssocSharesObjWrapTres
type V0042AssocSharesObjWrapTres struct {
	RunSeconds []V0042SharesUint64Tres `json:"run_seconds,omitempty"`
	GroupMinutes []V0042SharesUint64Tres `json:"group_minutes,omitempty"`
	Usage []V0042SharesFloat128Tres `json:"usage,omitempty"`
}

// NewV0042AssocSharesObjWrapTres instantiates a new V0042AssocSharesObjWrapTres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042AssocSharesObjWrapTres() *V0042AssocSharesObjWrapTres {
	this := V0042AssocSharesObjWrapTres{}
	return &this
}

// NewV0042AssocSharesObjWrapTresWithDefaults instantiates a new V0042AssocSharesObjWrapTres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042AssocSharesObjWrapTresWithDefaults() *V0042AssocSharesObjWrapTres {
	this := V0042AssocSharesObjWrapTres{}
	return &this
}

// GetRunSeconds returns the RunSeconds field value if set, zero value otherwise.
func (o *V0042AssocSharesObjWrapTres) GetRunSeconds() []V0042SharesUint64Tres {
	if o == nil || IsNil(o.RunSeconds) {
		var ret []V0042SharesUint64Tres
		return ret
	}
	return o.RunSeconds
}

// GetRunSecondsOk returns a tuple with the RunSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocSharesObjWrapTres) GetRunSecondsOk() ([]V0042SharesUint64Tres, bool) {
	if o == nil || IsNil(o.RunSeconds) {
		return nil, false
	}
	return o.RunSeconds, true
}

// HasRunSeconds returns a boolean if a field has been set.
func (o *V0042AssocSharesObjWrapTres) HasRunSeconds() bool {
	if o != nil && !IsNil(o.RunSeconds) {
		return true
	}

	return false
}

// SetRunSeconds gets a reference to the given []V0042SharesUint64Tres and assigns it to the RunSeconds field.
func (o *V0042AssocSharesObjWrapTres) SetRunSeconds(v []V0042SharesUint64Tres) {
	o.RunSeconds = v
}

// GetGroupMinutes returns the GroupMinutes field value if set, zero value otherwise.
func (o *V0042AssocSharesObjWrapTres) GetGroupMinutes() []V0042SharesUint64Tres {
	if o == nil || IsNil(o.GroupMinutes) {
		var ret []V0042SharesUint64Tres
		return ret
	}
	return o.GroupMinutes
}

// GetGroupMinutesOk returns a tuple with the GroupMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocSharesObjWrapTres) GetGroupMinutesOk() ([]V0042SharesUint64Tres, bool) {
	if o == nil || IsNil(o.GroupMinutes) {
		return nil, false
	}
	return o.GroupMinutes, true
}

// HasGroupMinutes returns a boolean if a field has been set.
func (o *V0042AssocSharesObjWrapTres) HasGroupMinutes() bool {
	if o != nil && !IsNil(o.GroupMinutes) {
		return true
	}

	return false
}

// SetGroupMinutes gets a reference to the given []V0042SharesUint64Tres and assigns it to the GroupMinutes field.
func (o *V0042AssocSharesObjWrapTres) SetGroupMinutes(v []V0042SharesUint64Tres) {
	o.GroupMinutes = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *V0042AssocSharesObjWrapTres) GetUsage() []V0042SharesFloat128Tres {
	if o == nil || IsNil(o.Usage) {
		var ret []V0042SharesFloat128Tres
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocSharesObjWrapTres) GetUsageOk() ([]V0042SharesFloat128Tres, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *V0042AssocSharesObjWrapTres) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []V0042SharesFloat128Tres and assigns it to the Usage field.
func (o *V0042AssocSharesObjWrapTres) SetUsage(v []V0042SharesFloat128Tres) {
	o.Usage = v
}

func (o V0042AssocSharesObjWrapTres) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042AssocSharesObjWrapTres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunSeconds) {
		toSerialize["run_seconds"] = o.RunSeconds
	}
	if !IsNil(o.GroupMinutes) {
		toSerialize["group_minutes"] = o.GroupMinutes
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableV0042AssocSharesObjWrapTres struct {
	value *V0042AssocSharesObjWrapTres
	isSet bool
}

func (v NullableV0042AssocSharesObjWrapTres) Get() *V0042AssocSharesObjWrapTres {
	return v.value
}

func (v *NullableV0042AssocSharesObjWrapTres) Set(val *V0042AssocSharesObjWrapTres) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042AssocSharesObjWrapTres) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042AssocSharesObjWrapTres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042AssocSharesObjWrapTres(val *V0042AssocSharesObjWrapTres) *NullableV0042AssocSharesObjWrapTres {
	return &NullableV0042AssocSharesObjWrapTres{value: val, isSet: true}
}

func (v NullableV0042AssocSharesObjWrapTres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042AssocSharesObjWrapTres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


