/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0042AssocMaxTres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042AssocMaxTres{}

// V0042AssocMaxTres struct for V0042AssocMaxTres
type V0042AssocMaxTres struct {
	Total []V0042Tres `json:"total,omitempty"`
	Group *V0042AssocMaxTresGroup `json:"group,omitempty"`
	Minutes *V0042AssocMaxTresMinutes `json:"minutes,omitempty"`
	Per *V0042AssocMaxTresPer `json:"per,omitempty"`
}

// NewV0042AssocMaxTres instantiates a new V0042AssocMaxTres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042AssocMaxTres() *V0042AssocMaxTres {
	this := V0042AssocMaxTres{}
	return &this
}

// NewV0042AssocMaxTresWithDefaults instantiates a new V0042AssocMaxTres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042AssocMaxTresWithDefaults() *V0042AssocMaxTres {
	this := V0042AssocMaxTres{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *V0042AssocMaxTres) GetTotal() []V0042Tres {
	if o == nil || IsNil(o.Total) {
		var ret []V0042Tres
		return ret
	}
	return o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocMaxTres) GetTotalOk() ([]V0042Tres, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *V0042AssocMaxTres) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given []V0042Tres and assigns it to the Total field.
func (o *V0042AssocMaxTres) SetTotal(v []V0042Tres) {
	o.Total = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V0042AssocMaxTres) GetGroup() V0042AssocMaxTresGroup {
	if o == nil || IsNil(o.Group) {
		var ret V0042AssocMaxTresGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocMaxTres) GetGroupOk() (*V0042AssocMaxTresGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V0042AssocMaxTres) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given V0042AssocMaxTresGroup and assigns it to the Group field.
func (o *V0042AssocMaxTres) SetGroup(v V0042AssocMaxTresGroup) {
	o.Group = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *V0042AssocMaxTres) GetMinutes() V0042AssocMaxTresMinutes {
	if o == nil || IsNil(o.Minutes) {
		var ret V0042AssocMaxTresMinutes
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocMaxTres) GetMinutesOk() (*V0042AssocMaxTresMinutes, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *V0042AssocMaxTres) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given V0042AssocMaxTresMinutes and assigns it to the Minutes field.
func (o *V0042AssocMaxTres) SetMinutes(v V0042AssocMaxTresMinutes) {
	o.Minutes = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *V0042AssocMaxTres) GetPer() V0042AssocMaxTresPer {
	if o == nil || IsNil(o.Per) {
		var ret V0042AssocMaxTresPer
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042AssocMaxTres) GetPerOk() (*V0042AssocMaxTresPer, bool) {
	if o == nil || IsNil(o.Per) {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *V0042AssocMaxTres) HasPer() bool {
	if o != nil && !IsNil(o.Per) {
		return true
	}

	return false
}

// SetPer gets a reference to the given V0042AssocMaxTresPer and assigns it to the Per field.
func (o *V0042AssocMaxTres) SetPer(v V0042AssocMaxTresPer) {
	o.Per = &v
}

func (o V0042AssocMaxTres) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042AssocMaxTres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	if !IsNil(o.Per) {
		toSerialize["per"] = o.Per
	}
	return toSerialize, nil
}

type NullableV0042AssocMaxTres struct {
	value *V0042AssocMaxTres
	isSet bool
}

func (v NullableV0042AssocMaxTres) Get() *V0042AssocMaxTres {
	return v.value
}

func (v *NullableV0042AssocMaxTres) Set(val *V0042AssocMaxTres) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042AssocMaxTres) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042AssocMaxTres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042AssocMaxTres(val *V0042AssocMaxTres) *NullableV0042AssocMaxTres {
	return &NullableV0042AssocMaxTres{value: val, isSet: true}
}

func (v NullableV0042AssocMaxTres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042AssocMaxTres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


