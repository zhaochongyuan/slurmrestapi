/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0042JobHet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042JobHet{}

// V0042JobHet struct for V0042JobHet
type V0042JobHet struct {
	// Heterogeneous job ID, if applicable
	JobId *int32 `json:"job_id,omitempty"`
	JobOffset *V0042Uint32NoValStruct `json:"job_offset,omitempty"`
}

// NewV0042JobHet instantiates a new V0042JobHet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042JobHet() *V0042JobHet {
	this := V0042JobHet{}
	return &this
}

// NewV0042JobHetWithDefaults instantiates a new V0042JobHet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042JobHetWithDefaults() *V0042JobHet {
	this := V0042JobHet{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *V0042JobHet) GetJobId() int32 {
	if o == nil || IsNil(o.JobId) {
		var ret int32
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042JobHet) GetJobIdOk() (*int32, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *V0042JobHet) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given int32 and assigns it to the JobId field.
func (o *V0042JobHet) SetJobId(v int32) {
	o.JobId = &v
}

// GetJobOffset returns the JobOffset field value if set, zero value otherwise.
func (o *V0042JobHet) GetJobOffset() V0042Uint32NoValStruct {
	if o == nil || IsNil(o.JobOffset) {
		var ret V0042Uint32NoValStruct
		return ret
	}
	return *o.JobOffset
}

// GetJobOffsetOk returns a tuple with the JobOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042JobHet) GetJobOffsetOk() (*V0042Uint32NoValStruct, bool) {
	if o == nil || IsNil(o.JobOffset) {
		return nil, false
	}
	return o.JobOffset, true
}

// HasJobOffset returns a boolean if a field has been set.
func (o *V0042JobHet) HasJobOffset() bool {
	if o != nil && !IsNil(o.JobOffset) {
		return true
	}

	return false
}

// SetJobOffset gets a reference to the given V0042Uint32NoValStruct and assigns it to the JobOffset field.
func (o *V0042JobHet) SetJobOffset(v V0042Uint32NoValStruct) {
	o.JobOffset = &v
}

func (o V0042JobHet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042JobHet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["job_id"] = o.JobId
	}
	if !IsNil(o.JobOffset) {
		toSerialize["job_offset"] = o.JobOffset
	}
	return toSerialize, nil
}

type NullableV0042JobHet struct {
	value *V0042JobHet
	isSet bool
}

func (v NullableV0042JobHet) Get() *V0042JobHet {
	return v.value
}

func (v *NullableV0042JobHet) Set(val *V0042JobHet) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042JobHet) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042JobHet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042JobHet(val *V0042JobHet) *NullableV0042JobHet {
	return &NullableV0042JobHet{value: val, isSet: true}
}

func (v NullableV0042JobHet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042JobHet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


