/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0042SharesRespMsg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042SharesRespMsg{}

// V0042SharesRespMsg struct for V0042SharesRespMsg
type V0042SharesRespMsg struct {
	Shares []V0042AssocSharesObjWrap `json:"shares,omitempty"`
	// Total number of shares
	TotalShares *int64 `json:"total_shares,omitempty"`
}

// NewV0042SharesRespMsg instantiates a new V0042SharesRespMsg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042SharesRespMsg() *V0042SharesRespMsg {
	this := V0042SharesRespMsg{}
	return &this
}

// NewV0042SharesRespMsgWithDefaults instantiates a new V0042SharesRespMsg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042SharesRespMsgWithDefaults() *V0042SharesRespMsg {
	this := V0042SharesRespMsg{}
	return &this
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *V0042SharesRespMsg) GetShares() []V0042AssocSharesObjWrap {
	if o == nil || IsNil(o.Shares) {
		var ret []V0042AssocSharesObjWrap
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042SharesRespMsg) GetSharesOk() ([]V0042AssocSharesObjWrap, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *V0042SharesRespMsg) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []V0042AssocSharesObjWrap and assigns it to the Shares field.
func (o *V0042SharesRespMsg) SetShares(v []V0042AssocSharesObjWrap) {
	o.Shares = v
}

// GetTotalShares returns the TotalShares field value if set, zero value otherwise.
func (o *V0042SharesRespMsg) GetTotalShares() int64 {
	if o == nil || IsNil(o.TotalShares) {
		var ret int64
		return ret
	}
	return *o.TotalShares
}

// GetTotalSharesOk returns a tuple with the TotalShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042SharesRespMsg) GetTotalSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalShares) {
		return nil, false
	}
	return o.TotalShares, true
}

// HasTotalShares returns a boolean if a field has been set.
func (o *V0042SharesRespMsg) HasTotalShares() bool {
	if o != nil && !IsNil(o.TotalShares) {
		return true
	}

	return false
}

// SetTotalShares gets a reference to the given int64 and assigns it to the TotalShares field.
func (o *V0042SharesRespMsg) SetTotalShares(v int64) {
	o.TotalShares = &v
}

func (o V0042SharesRespMsg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042SharesRespMsg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.TotalShares) {
		toSerialize["total_shares"] = o.TotalShares
	}
	return toSerialize, nil
}

type NullableV0042SharesRespMsg struct {
	value *V0042SharesRespMsg
	isSet bool
}

func (v NullableV0042SharesRespMsg) Get() *V0042SharesRespMsg {
	return v.value
}

func (v *NullableV0042SharesRespMsg) Set(val *V0042SharesRespMsg) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042SharesRespMsg) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042SharesRespMsg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042SharesRespMsg(val *V0042SharesRespMsg) *NullableV0042SharesRespMsg {
	return &NullableV0042SharesRespMsg{value: val, isSet: true}
}

func (v NullableV0042SharesRespMsg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042SharesRespMsg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


