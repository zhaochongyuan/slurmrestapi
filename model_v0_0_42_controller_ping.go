/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V0042ControllerPing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042ControllerPing{}

// V0042ControllerPing struct for V0042ControllerPing
type V0042ControllerPing struct {
	// Target for ping
	Hostname *string `json:"hostname,omitempty"`
	// Ping result
	// Deprecated
	Pinged *string `json:"pinged,omitempty"`
	// If ping RPC responded with pong from controller
	Responding bool `json:"responding"`
	// Number of microseconds it took to successfully ping or timeout
	Latency *int64 `json:"latency,omitempty"`
	// The operating mode of the responding slurmctld
	// Deprecated
	Mode *string `json:"mode,omitempty"`
	// Is responding slurmctld the primary controller
	Primary bool `json:"primary"`
}

type _V0042ControllerPing V0042ControllerPing

// NewV0042ControllerPing instantiates a new V0042ControllerPing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042ControllerPing(responding bool, primary bool) *V0042ControllerPing {
	this := V0042ControllerPing{}
	this.Responding = responding
	this.Primary = primary
	return &this
}

// NewV0042ControllerPingWithDefaults instantiates a new V0042ControllerPing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042ControllerPingWithDefaults() *V0042ControllerPing {
	this := V0042ControllerPing{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *V0042ControllerPing) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042ControllerPing) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *V0042ControllerPing) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *V0042ControllerPing) SetHostname(v string) {
	o.Hostname = &v
}

// GetPinged returns the Pinged field value if set, zero value otherwise.
// Deprecated
func (o *V0042ControllerPing) GetPinged() string {
	if o == nil || IsNil(o.Pinged) {
		var ret string
		return ret
	}
	return *o.Pinged
}

// GetPingedOk returns a tuple with the Pinged field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *V0042ControllerPing) GetPingedOk() (*string, bool) {
	if o == nil || IsNil(o.Pinged) {
		return nil, false
	}
	return o.Pinged, true
}

// HasPinged returns a boolean if a field has been set.
func (o *V0042ControllerPing) HasPinged() bool {
	if o != nil && !IsNil(o.Pinged) {
		return true
	}

	return false
}

// SetPinged gets a reference to the given string and assigns it to the Pinged field.
// Deprecated
func (o *V0042ControllerPing) SetPinged(v string) {
	o.Pinged = &v
}

// GetResponding returns the Responding field value
func (o *V0042ControllerPing) GetResponding() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Responding
}

// GetRespondingOk returns a tuple with the Responding field value
// and a boolean to check if the value has been set.
func (o *V0042ControllerPing) GetRespondingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Responding, true
}

// SetResponding sets field value
func (o *V0042ControllerPing) SetResponding(v bool) {
	o.Responding = v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *V0042ControllerPing) GetLatency() int64 {
	if o == nil || IsNil(o.Latency) {
		var ret int64
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042ControllerPing) GetLatencyOk() (*int64, bool) {
	if o == nil || IsNil(o.Latency) {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *V0042ControllerPing) HasLatency() bool {
	if o != nil && !IsNil(o.Latency) {
		return true
	}

	return false
}

// SetLatency gets a reference to the given int64 and assigns it to the Latency field.
func (o *V0042ControllerPing) SetLatency(v int64) {
	o.Latency = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
// Deprecated
func (o *V0042ControllerPing) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *V0042ControllerPing) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *V0042ControllerPing) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
// Deprecated
func (o *V0042ControllerPing) SetMode(v string) {
	o.Mode = &v
}

// GetPrimary returns the Primary field value
func (o *V0042ControllerPing) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *V0042ControllerPing) GetPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *V0042ControllerPing) SetPrimary(v bool) {
	o.Primary = v
}

func (o V0042ControllerPing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042ControllerPing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Pinged) {
		toSerialize["pinged"] = o.Pinged
	}
	toSerialize["responding"] = o.Responding
	if !IsNil(o.Latency) {
		toSerialize["latency"] = o.Latency
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	toSerialize["primary"] = o.Primary
	return toSerialize, nil
}

func (o *V0042ControllerPing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"responding",
		"primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0042ControllerPing := _V0042ControllerPing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV0042ControllerPing)

	if err != nil {
		return err
	}

	*o = V0042ControllerPing(varV0042ControllerPing)

	return err
}

type NullableV0042ControllerPing struct {
	value *V0042ControllerPing
	isSet bool
}

func (v NullableV0042ControllerPing) Get() *V0042ControllerPing {
	return v.value
}

func (v *NullableV0042ControllerPing) Set(val *V0042ControllerPing) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042ControllerPing) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042ControllerPing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042ControllerPing(val *V0042ControllerPing) *NullableV0042ControllerPing {
	return &NullableV0042ControllerPing{value: val, isSet: true}
}

func (v NullableV0042ControllerPing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042ControllerPing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


