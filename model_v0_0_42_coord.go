/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V0042Coord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042Coord{}

// V0042Coord struct for V0042Coord
type V0042Coord struct {
	// User name
	Name string `json:"name"`
	// Indicates whether the coordinator was directly assigned to this account
	Direct *bool `json:"direct,omitempty"`
}

type _V0042Coord V0042Coord

// NewV0042Coord instantiates a new V0042Coord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042Coord(name string) *V0042Coord {
	this := V0042Coord{}
	this.Name = name
	return &this
}

// NewV0042CoordWithDefaults instantiates a new V0042Coord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042CoordWithDefaults() *V0042Coord {
	this := V0042Coord{}
	return &this
}

// GetName returns the Name field value
func (o *V0042Coord) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V0042Coord) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V0042Coord) SetName(v string) {
	o.Name = v
}

// GetDirect returns the Direct field value if set, zero value otherwise.
func (o *V0042Coord) GetDirect() bool {
	if o == nil || IsNil(o.Direct) {
		var ret bool
		return ret
	}
	return *o.Direct
}

// GetDirectOk returns a tuple with the Direct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042Coord) GetDirectOk() (*bool, bool) {
	if o == nil || IsNil(o.Direct) {
		return nil, false
	}
	return o.Direct, true
}

// HasDirect returns a boolean if a field has been set.
func (o *V0042Coord) HasDirect() bool {
	if o != nil && !IsNil(o.Direct) {
		return true
	}

	return false
}

// SetDirect gets a reference to the given bool and assigns it to the Direct field.
func (o *V0042Coord) SetDirect(v bool) {
	o.Direct = &v
}

func (o V0042Coord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042Coord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Direct) {
		toSerialize["direct"] = o.Direct
	}
	return toSerialize, nil
}

func (o *V0042Coord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0042Coord := _V0042Coord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV0042Coord)

	if err != nil {
		return err
	}

	*o = V0042Coord(varV0042Coord)

	return err
}

type NullableV0042Coord struct {
	value *V0042Coord
	isSet bool
}

func (v NullableV0042Coord) Get() *V0042Coord {
	return v.value
}

func (v *NullableV0042Coord) Set(val *V0042Coord) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042Coord) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042Coord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042Coord(val *V0042Coord) *NullableV0042Coord {
	return &NullableV0042Coord{value: val, isSet: true}
}

func (v NullableV0042Coord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042Coord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


