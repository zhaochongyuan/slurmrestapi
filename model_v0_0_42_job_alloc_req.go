/*
Slurm REST API

API to access and control Slurm

API version: Slurm-24.11.5&openapi/slurmctld&openapi/slurmdbd
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0042JobAllocReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0042JobAllocReq{}

// V0042JobAllocReq struct for V0042JobAllocReq
type V0042JobAllocReq struct {
	Hetjob []V0042JobDescMsg `json:"hetjob,omitempty"`
	Job *V0042JobDescMsg `json:"job,omitempty"`
}

// NewV0042JobAllocReq instantiates a new V0042JobAllocReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0042JobAllocReq() *V0042JobAllocReq {
	this := V0042JobAllocReq{}
	return &this
}

// NewV0042JobAllocReqWithDefaults instantiates a new V0042JobAllocReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0042JobAllocReqWithDefaults() *V0042JobAllocReq {
	this := V0042JobAllocReq{}
	return &this
}

// GetHetjob returns the Hetjob field value if set, zero value otherwise.
func (o *V0042JobAllocReq) GetHetjob() []V0042JobDescMsg {
	if o == nil || IsNil(o.Hetjob) {
		var ret []V0042JobDescMsg
		return ret
	}
	return o.Hetjob
}

// GetHetjobOk returns a tuple with the Hetjob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042JobAllocReq) GetHetjobOk() ([]V0042JobDescMsg, bool) {
	if o == nil || IsNil(o.Hetjob) {
		return nil, false
	}
	return o.Hetjob, true
}

// HasHetjob returns a boolean if a field has been set.
func (o *V0042JobAllocReq) HasHetjob() bool {
	if o != nil && !IsNil(o.Hetjob) {
		return true
	}

	return false
}

// SetHetjob gets a reference to the given []V0042JobDescMsg and assigns it to the Hetjob field.
func (o *V0042JobAllocReq) SetHetjob(v []V0042JobDescMsg) {
	o.Hetjob = v
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *V0042JobAllocReq) GetJob() V0042JobDescMsg {
	if o == nil || IsNil(o.Job) {
		var ret V0042JobDescMsg
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0042JobAllocReq) GetJobOk() (*V0042JobDescMsg, bool) {
	if o == nil || IsNil(o.Job) {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *V0042JobAllocReq) HasJob() bool {
	if o != nil && !IsNil(o.Job) {
		return true
	}

	return false
}

// SetJob gets a reference to the given V0042JobDescMsg and assigns it to the Job field.
func (o *V0042JobAllocReq) SetJob(v V0042JobDescMsg) {
	o.Job = &v
}

func (o V0042JobAllocReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0042JobAllocReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hetjob) {
		toSerialize["hetjob"] = o.Hetjob
	}
	if !IsNil(o.Job) {
		toSerialize["job"] = o.Job
	}
	return toSerialize, nil
}

type NullableV0042JobAllocReq struct {
	value *V0042JobAllocReq
	isSet bool
}

func (v NullableV0042JobAllocReq) Get() *V0042JobAllocReq {
	return v.value
}

func (v *NullableV0042JobAllocReq) Set(val *V0042JobAllocReq) {
	v.value = val
	v.isSet = true
}

func (v NullableV0042JobAllocReq) IsSet() bool {
	return v.isSet
}

func (v *NullableV0042JobAllocReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0042JobAllocReq(val *V0042JobAllocReq) *NullableV0042JobAllocReq {
	return &NullableV0042JobAllocReq{value: val, isSet: true}
}

func (v NullableV0042JobAllocReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0042JobAllocReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


